// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoeStore.Data.EFCore;

#nullable disable

namespace ShoeStore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240115111234_Add Price In Shoes")]
    partial class AddPriceInShoes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("ShoeStore.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Adidas"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Reebok"
                        });
                });

            modelBuilder.Entity("ShoeStore.Models.CollectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CollectionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "мужская",
                            ShortName = "муж"
                        },
                        new
                        {
                            Id = 2,
                            Name = "женская",
                            ShortName = "жен"
                        },
                        new
                        {
                            Id = 3,
                            Name = "детская",
                            ShortName = "дет"
                        });
                });

            modelBuilder.Entity("ShoeStore.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "черный"
                        },
                        new
                        {
                            Id = 2,
                            Name = "белый"
                        });
                });

            modelBuilder.Entity("ShoeStore.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BrandId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            Name = "AdidasModel1"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            Name = "AdidasModel2"
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 2,
                            Name = "ReebokModel1"
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            Name = "ReebokModel2"
                        });
                });

            modelBuilder.Entity("ShoeStore.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Seasons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "осень/зима"
                        },
                        new
                        {
                            Id = 2,
                            Name = "весна/лето"
                        });
                });

            modelBuilder.Entity("ShoeStore.Models.Shoe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CollectionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShoeTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SizeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CollectionTypeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("ShoeTypeId");

                    b.HasIndex("SizeId");

                    b.ToTable("Shoes");
                });

            modelBuilder.Entity("ShoeStore.Models.ShoeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ShoeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "кроссовки"
                        },
                        new
                        {
                            Id = 2,
                            Name = "ботинки"
                        });
                });

            modelBuilder.Entity("ShoeStore.Models.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Number")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 16.0
                        },
                        new
                        {
                            Id = 2,
                            Number = 17.0
                        },
                        new
                        {
                            Id = 3,
                            Number = 18.0
                        },
                        new
                        {
                            Id = 4,
                            Number = 19.0
                        },
                        new
                        {
                            Id = 5,
                            Number = 20.0
                        },
                        new
                        {
                            Id = 6,
                            Number = 21.0
                        },
                        new
                        {
                            Id = 7,
                            Number = 22.0
                        },
                        new
                        {
                            Id = 8,
                            Number = 23.0
                        },
                        new
                        {
                            Id = 9,
                            Number = 24.0
                        },
                        new
                        {
                            Id = 10,
                            Number = 25.0
                        },
                        new
                        {
                            Id = 11,
                            Number = 26.0
                        },
                        new
                        {
                            Id = 12,
                            Number = 27.0
                        },
                        new
                        {
                            Id = 13,
                            Number = 28.0
                        },
                        new
                        {
                            Id = 14,
                            Number = 29.0
                        },
                        new
                        {
                            Id = 15,
                            Number = 30.0
                        },
                        new
                        {
                            Id = 16,
                            Number = 31.0
                        },
                        new
                        {
                            Id = 17,
                            Number = 32.0
                        },
                        new
                        {
                            Id = 18,
                            Number = 33.0
                        },
                        new
                        {
                            Id = 19,
                            Number = 34.0
                        },
                        new
                        {
                            Id = 20,
                            Number = 35.0
                        },
                        new
                        {
                            Id = 21,
                            Number = 36.0
                        },
                        new
                        {
                            Id = 22,
                            Number = 37.0
                        },
                        new
                        {
                            Id = 23,
                            Number = 38.0
                        },
                        new
                        {
                            Id = 24,
                            Number = 39.0
                        },
                        new
                        {
                            Id = 25,
                            Number = 40.0
                        },
                        new
                        {
                            Id = 26,
                            Number = 41.0
                        },
                        new
                        {
                            Id = 27,
                            Number = 42.0
                        },
                        new
                        {
                            Id = 28,
                            Number = 43.0
                        },
                        new
                        {
                            Id = 29,
                            Number = 44.0
                        },
                        new
                        {
                            Id = 30,
                            Number = 45.0
                        },
                        new
                        {
                            Id = 31,
                            Number = 46.0
                        },
                        new
                        {
                            Id = 32,
                            Number = 47.0
                        },
                        new
                        {
                            Id = 33,
                            Number = 48.0
                        },
                        new
                        {
                            Id = 34,
                            Number = 49.0
                        },
                        new
                        {
                            Id = 35,
                            Number = 50.0
                        },
                        new
                        {
                            Id = 36,
                            Number = 51.0
                        },
                        new
                        {
                            Id = 37,
                            Number = 52.0
                        },
                        new
                        {
                            Id = 38,
                            Number = 53.0
                        },
                        new
                        {
                            Id = 39,
                            Number = 54.0
                        },
                        new
                        {
                            Id = 40,
                            Number = 55.0
                        });
                });

            modelBuilder.Entity("ShoeStore.Models.Model", b =>
                {
                    b.HasOne("ShoeStore.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("ShoeStore.Models.Shoe", b =>
                {
                    b.HasOne("ShoeStore.Models.CollectionType", "CollectionType")
                        .WithMany("Shoes")
                        .HasForeignKey("CollectionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeStore.Models.Color", "Color")
                        .WithMany("Shoes")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeStore.Models.Model", "Model")
                        .WithMany("Shoes")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeStore.Models.Season", "Season")
                        .WithMany("Shoes")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeStore.Models.ShoeType", "ShoeType")
                        .WithMany("Shoes")
                        .HasForeignKey("ShoeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoeStore.Models.Size", "Size")
                        .WithMany("Shoes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CollectionType");

                    b.Navigation("Color");

                    b.Navigation("Model");

                    b.Navigation("Season");

                    b.Navigation("ShoeType");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("ShoeStore.Models.CollectionType", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoeStore.Models.Color", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoeStore.Models.Model", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoeStore.Models.Season", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoeStore.Models.ShoeType", b =>
                {
                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("ShoeStore.Models.Size", b =>
                {
                    b.Navigation("Shoes");
                });
#pragma warning restore 612, 618
        }
    }
}
